{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21280\viewh10820\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
22\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
#library(readr)\
\
#install.packages('stringr')\
#txt.tmp <- str_replace_all(conteudo_do_tweet,"[^[:graph:]]", " ") \
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
#readr::read_csv\
centers <- read.csv('GeocodedHomeCare3.csv', encoding="UTF-8", stringsAsFactors=FALSE)\
\
\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
       #sidebar \{\
       background-color: white;\
       \}\
       \
       body, label, input, button, select \{ \
       font-family: "Arial";\
       \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
  \
  \
  sidebarLayout(\
    \
    \
    sidebarPanel(id="sidebar",\
                 \
                 img(id="img",src = "LogoBlue3.png", height = 300, width=400),\
                 \
                 #h3( em("Home Care Centers in Australia"), align = "center")\
                 h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
                 h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 \
                 h4("2: Search by postcode, culture, language, religion, and services. Just type in the search box. Examples: ",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia Spanish 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:navy",font="Times New Roman")),\
    \
    \
    \
    \
    \
    \
    \
    mainPanel(\
      \
      leafletOutput("sitemap"),\
 \
      DT::dataTableOutput("table")\
     # verbatimTextOutput("selectedCells")\
      \
      \
      \
    )  \
    \
    \
    \
    \
  )\
)\
\
server <- function(input, output) \{\
\
  \
  \
  #\
  \
  \
  output$table <- renderDataTable(\{\
 \
    \
    \
    datatable(\
              centers, \
              selection='single',\
              extensions = c('Responsive','Buttons','FixedHeader','Scroller','KeyTable','FixedColumns'),\
              \
              \
              rownames=FALSE,\
              #fixedHeader = TRUE,keys = TRUE,\
              #options = list(searchHighlight = TRUE)\
              #filter = 'top',\
              #dom = 'Bfrtip',\
              #searchHighlight = TRUE\
      \
              options = list(\
                              columnDefs = list(list(targets = c(0,1,2,9,10,11,12,13), searchable = FALSE)),\
                             scrollX = TRUE,\
                             dom = 'Bfrtip',\
                            \
                             \
                             pageLength=5,\
                             buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),deferRender = TRUE,\
                             scrollY = 200,\
                             scroller = TRUE,\
                            \
                             search = list( caseInsensitive = FALSE),\
                             initComplete = JS(\
                               "function(settings, json) \{",\
                               "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                               "\}")\
              )\
    ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      \
      formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      formatStyle('State', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")%>%\
      formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman") %>%\
      formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold',`font-size` = '18px',font="Times New Roman")\
  \})\
  \
  \
   \
  \
  \
  output$selectedCells <- renderPrint(input$table_rows_selected)\
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
  #\
  observeEvent(input$table_rows_selected,\{\
    if(!is.null(input$table_rows_selected))\
    \{\
    \
      #\
     \
      \
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      #\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      #\
      output$sitemap = renderLeaflet(map)\
      \
    \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(144.96332,-37.814,zoom = 10)%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      \
      #%>%  \
      # addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
    \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  \
  \
\}\
\
shinyApp(ui, server)\
\
\
\
21: has duplicated data, not disable column search \
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
#library(readr)\
\
#install.packages('stringr')\
#txt.tmp <- str_replace_all(conteudo_do_tweet,"[^[:graph:]]", " ") \
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
#readr::read_csv\
centers <- read.csv('GeocodedHomeCare3.csv', encoding="UTF-8", stringsAsFactors=FALSE)\
\
\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
       #sidebar \{\
       background-color: white;\
       \}\
       \
       body, label, input, button, select \{ \
       font-family: "Arial";\
       \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
  \
  \
  sidebarLayout(\
    \
    \
    sidebarPanel(id="sidebar",\
                 \
                 img(id="img",src = "LogoBlue3.png", height = 300, width=400),\
                 \
                 #h3( em("Home Care Centers in Australia"), align = "center")\
                 h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
                 h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 \
                 h4("2: Search by postcode, culture, language, religion, and services. Just type in the search box. Examples: ",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia Spanish 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:navy",font="Times New Roman")),\
    \
    \
    \
    \
    \
    \
    \
    mainPanel(\
      \
      leafletOutput("sitemap"),\
      fluidRow(\
        column(4,\
               selectInput("State",\
                           "State:",\
                           c("All",\
                             unique(as.character(centers$State))))\
        ),\
        column(4,\
               selectInput("Postcode",\
                           "Postcode:",\
                           c("All",\
                             unique(as.character(centers$Postcode))))\
        )),\
      DT::dataTableOutput("table"),\
      verbatimTextOutput("selectedCells")\
      \
      \
      \
    )  \
    \
    \
    \
    \
  )\
)\
\
server <- function(input, output) \{\
\
  \
  \
  #\
  \
  \
  output$table <- renderDataTable(\{\
    \
    filteredPostcode <-\
      centers %>%\
      filter(\
        Postcode == input$Postcode \
        \
      )\
    \
    \
    datatable(\
              centers, \
              selection='single',\
              extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
              \
              \
              rownames=FALSE,\
              \
              #options = list(searchHighlight = TRUE)\
              options = list(searchHighlight = TRUE,dom = 'Bfrtip',pageLength=5,\
                             buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = TRUE,\
                             scrollY = 200,\
                             scroller = TRUE,\
                             search = list( caseInsensitive = FALSE),\
                             initComplete = JS(\
                               "function(settings, json) \{",\
                               "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                               "\}")\
              )\
    ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
      formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
      formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
      formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
      \
      formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \})\
  \
  \
   \
  \
  \
  output$selectedCells <- renderPrint(input$table_rows_selected)\
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
  #\
  observeEvent(input$table_rows_selected,\{\
    if(!is.null(input$table_rows_selected))\
    \{\
     # info = input$table_cell_clicked\
      # do nothing if not clicked yet, or the clicked cell is not in the 1st column\
     # if (is.null(info$value) || info$col != 0) \
     # \{\
        \
      #\
     \
      \
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      #\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      #\
      output$sitemap = renderLeaflet(map)\
      #return()\
    \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      \
      #%>%  \
      # addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
    \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  \
  \
\}\
\
shinyApp(ui, server)\
\
\
20:\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
#library(readr)\
\
#install.packages('stringr')\
#txt.tmp <- str_replace_all(conteudo_do_tweet,"[^[:graph:]]", " ") \
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
#readr::read_csv\
centers <- read.csv('GeocodedHomeCare3.csv', encoding="UTF-8", stringsAsFactors=FALSE)\
\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
       #sidebar \{\
       background-color: white;\
       \}\
       \
       body, label, input, button, select \{ \
       font-family: "Arial";\
       \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
  \
  \
  sidebarLayout(\
    \
    \
    sidebarPanel(id="sidebar",\
                 \
                 img(id="img",src = "LogoBlue3.png", height = 300, width=400),\
                 \
                 #h3( em("Home Care Centers in Australia"), align = "center")\
                 h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
                 h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 \
                 h4("2: Search by postcode, culture, language, religion, and services. Just type in the search box. Examples: ",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Italian 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia",align = "left",style = "color:navy",font="Times New Roman"),\
                 h5("- Dementia Spanish 2200",align = "left",style = "color:navy",font="Times New Roman"),\
                 \
                 h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:navy",font="Times New Roman")),\
    \
    \
    \
    \
    \
    \
    \
    mainPanel(\
      \
      leafletOutput("sitemap"),\
      fluidRow(\
        column(4,\
               selectInput("Postcode",\
                           "Postcode:",\
                           c("All",\
                             unique(as.character(centers$Postcode))))\
        )),\
      DT::dataTableOutput("table")\
      \
      \
      \
    )  \
    \
    \
    \
    \
  )\
)\
\
server <- function(input, output) \{\
  \
  \
  \
 \
  \
  \
 \
  #\
 \
  \
  output$table <- renderDataTable(\{\
    filtered <-\
      centers %>%\
      filter(\
        Postcode == input$Postcode\
        \
      )\
    \
    datatable(filtered, \
              selection='single',\
              extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
              \
              \
              rownames=FALSE,\
              \
              #options = list(searchHighlight = TRUE)\
              options = list(searchHighlight = TRUE,dom = 'Bfrtip',pageLength=5,\
                             buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = FALSE,\
                             scrollY = 200,\
                             scroller = TRUE,\
                             search = list( caseInsensitive = FALSE),\
                             initComplete = JS(\
                               "function(settings, json) \{",\
                               "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                               "\}")\
              )\
    ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
      formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
      formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
      formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
      \
      formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
      formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
      formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \})\
    \
    \
    \
     \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
  #\
  observeEvent(input$table_rows_selected,\{\
    if(!is.null(input$table_rows_selected))\
    \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      output$sitemap = renderLeaflet(map)\
    \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      \
      #%>%  \
      # addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
    \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  \
  \
\}\
\
shinyApp(ui, server)\cf3 \ul \
\
\
\cf2 \ulnone \
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
#library(readr)\
\
#install.packages('stringr')\
#txt.tmp <- str_replace_all(conteudo_do_tweet,"[^[:graph:]]", " ") \
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
#readr::read_csv\
centers <- read.csv('GeocodedHomeCare3.csv', encoding="UTF-8", stringsAsFactors=FALSE)\
\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
         #sidebar \{\
            background-color: white;\
        \}\
\
        body, label, input, button, select \{ \
          font-family: "Arial";\
        \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
 \
  \
  sidebarLayout(\
   \
    \
    sidebarPanel(id="sidebar",\
      \
      img(id="img",src = "LogoBlue3.png", height = 300, width=400),\
      \
      #h3( em("Home Care Centers in Australia"), align = "center")\
      h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
      h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:navy",font="Times New Roman"),\
      \
      \
      h4("2: Search by postcode, culture, language, religion, and services. Just type in the search box. Examples: ",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Italian",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Italian 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Dementia",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Dementia Spanish 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      \
      h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:navy",font="Times New Roman")),\
      \
     \
      \
     \
      \
  \
\
    mainPanel(\
      \
      leafletOutput("sitemap"),\
      DT::dataTableOutput("table")\
     \
      \
      \
    )  \
           \
          \
  \
\
)\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
            extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
            \
        \
            rownames=FALSE,\
           \
            #options = list(searchHighlight = TRUE)\
            options = list(searchHighlight = TRUE,dom = 'Bfrtip',pageLength=5,\
                           buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = FALSE,\
                           scrollY = 200,\
                           scroller = TRUE,\
                           search = list( caseInsensitive = FALSE),\
              initComplete = JS(\
                "function(settings, json) \{",\
                "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                "\}")\
            )\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      \
      #%>%  \
       # addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
\
\
\
\
\
\
1: only with map\
\
library(shiny)\
library(googleway)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
ui <- shiny::basicPage(\
  \
  div(\
    textInput(inputId = "my_address", label = "")    \
    ,textOutput(outputId = "copy_of_address")\
    ,HTML(paste0("\
                 <script>\
                 function initAutocomplete() \{\
                 new google.maps.places.Autocomplete(\
                 (document.getElementById('my_address')),\
                 \{types: ['geocode']\}\
                 );\
                 \}\
                 </script>\
                 <script src='https://maps.googleapis.com/maps/api/js?key=", key,"&libraries=places&callback=initAutocomplete'\
                 async defer></script>\
                 "))\
    ,google_mapOutput(outputId = "my_map")\
    )\
  \
    )\
\
server <- function(input, output) \{\
  \
  my_address <- reactive(\{\
    input$my_address\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
  output$my_map <- renderGoogle_map(\{\
    my_address <- my_address()\
    validate(\
      need(my_address, "Address not available")\
    )\
    \
    df <- google_geocode(address = my_address)\
    my_coords <- geocode_coordinates(df)\
    my_coords <- c(my_coords$lat[1], my_coords$lng[1])\
    \
    google_map(\
      location = my_coords,\
      zoom = 12,\
      map_type_control = FALSE,\
      zoom_control = FALSE,\
      street_view_control = FALSE\
    )\
  \})\
  \
\}\
\
shinyApp(ui, server)\
\
\
2: Dashboard\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    tabItems(\
      # First tab content\
      tabItem(tabName = "dashboard",\
              fluidRow(\
                box(plotOutput("plot1", height = 250)),\
                \
                box(\
                  title = "Controls",\
                  sliderInput("slider", "Number of observations:", 1, 100, 50)\
                )\
              )\
      ),\
      \
      # Second tab content\
      tabItem(tabName = "widgets",\
              h2("Widgets tab content")\
      )\
    )\
  )\
)\
\
server <- function(input, output) \{\
  set.seed(122)\
  histdata <- rnorm(500)\
  \
  output$plot1 <- renderPlot(\{\
    data <- histdata[seq_len(input$slider)]\
    hist(data)\
  \})\
\}\
\
shinyApp(ui, server)\
\
3: dashboard with map\
\
\
library(shiny)\
library(shinydashboard)\
library(googleway)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    div(\
      textInput(inputId = "my_address", label = "")    \
      ,textOutput(outputId = "copy_of_address")\
      ,HTML(paste0("\
                 <script>\
                 function initAutocomplete() \{\
                 new google.maps.places.Autocomplete(\
                 (document.getElementById('my_address')),\
                 \{types: ['geocode']\}\
                 );\
                 \}\
                 </script>\
                 <script src='https://maps.googleapis.com/maps/api/js?key=", key,"&libraries=places&callback=initAutocomplete'\
                 async defer></script>\
                 "))\
      ,google_mapOutput(outputId = "my_map")\
    ),\
    \
    \
    tabItems(\
      # First tab content\
      tabItem(tabName = "dashboard",\
              fluidRow(\
                box(plotOutput("plot1", height = 250)),\
                \
                box(\
                  title = "Controls",\
                  sliderInput("slider", "Number of observations:", 1, 100, 50)\
                )\
              )\
      ),\
      \
      # Second tab content\
      tabItem(tabName = "widgets",\
              h2("Widgets tab content")\
      )\
    )\
  )\
)\
      \
      \
              \
              \
   \
\
\
server <- function(input, output) \{\
  set.seed(122)\
  histdata <- rnorm(500)\
  \
  output$plot1 <- renderPlot(\{\
    data <- histdata[seq_len(input$slider)]\
    hist(data)\
  \})\
  \
  my_address <- reactive(\{\
    input$my_address\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
  output$my_map <- renderGoogle_map(\{\
    my_address <- my_address()\
    validate(\
      need(my_address, "Address not available")\
    )\
    \
    df <- google_geocode(address = my_address)\
    my_coords <- geocode_coordinates(df)\
    my_coords <- c(my_coords$lat[1], my_coords$lng[1])\
    \
    google_map(\
      location = my_coords,\
      zoom = 12,\
      map_type_control = FALSE,\
      zoom_control = FALSE,\
      street_view_control = FALSE\
    )\
  \})\
\}\
\
shinyApp(ui, server)\
\
4: data table\
\
    # search for Ma or Me\
    datatable(\
      centers, colnames = c('No' = 1),\
      filter = list(position = 'top', clear = FALSE),\
      options = list(\
        search = list(regex = TRUE, caseInsensitive = FALSE, search = ''),\
        pageLength = 2\
      )\
    )\
\
5: temp\
\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
mtcars2 = mtcars[, c(1:5, 9)]\
mtcars2$am = factor(mtcars$am, c(0, 1), c('automatic', 'manual'))\
\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    \
    \
    # search for Ma or Me\
    datatable(\
      centers, colnames = c('No' = 1),\
      filter = list(position = 'top', clear = FALSE),\
      options = list(\
        search = list(regex = TRUE, caseInsensitive = TRUE, search = ''),\
        pageLength = 1\
      )\
    ),\
    div(\
      textInput(inputId = "my_address", label = "")    \
      ,textOutput(outputId = "copy_of_address")\
      ,HTML(paste0("\
                 <script>\
                 function initAutocomplete() \{\
                 new google.maps.places.Autocomplete(\
                 (document.getElementById('my_address')),\
                 \{types: ['geocode']\}\
                 );\
                 \}\
                 </script>\
                 <script src='https://maps.googleapis.com/maps/api/js?key=", key,"&libraries=places&callback=initAutocomplete'\
                 async defer></script>\
                 "))\
      ,google_mapOutput(outputId = "my_map")\
    ),\
    \
    \
    tabItems(\
      # First tab content\
      tabItem(tabName = "dashboard",\
              fluidRow(\
                box(plotOutput("plot1", height = 250)),\
                \
                box(\
                  title = "Controls",\
                  sliderInput("slider", "Number of observations:", 1, 100, 50)\
                )\
              )\
      ),\
      \
      # Second tab content\
      tabItem(tabName = "widgets",\
              h2("Widgets tab content")\
      )\
    )\
  )\
)\
      \
      \
              \
              \
   \
\
\
server <- function(input, output) \{\
  set.seed(122)\
  histdata <- rnorm(500)\
  \
  output$plot1 <- renderPlot(\{\
    data <- histdata[seq_len(input$slider)]\
    hist(data)\
  \})\
  \
  my_address <- reactive(\{\
    input$my_address\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
  output$my_map <- renderGoogle_map(\{\
    my_address <- my_address()\
    validate(\
      need(my_address, "Address not available")\
    )\
    \
    df <- google_geocode(address = my_address)\
    my_coords <- geocode_coordinates(df)\
    my_coords <- c(my_coords$lat[1], my_coords$lng[1])\
    \
    google_map(\
      location = my_coords,\
      zoom = 12,\
      map_type_control = FALSE,\
      zoom_control = FALSE,\
      street_view_control = FALSE\
    )\
  \})\
\}\
\
shinyApp(ui, server)\
\
6: data table (print)\
\
library(shiny)\
library(shinydashboard)\
library(DT)\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Data Table Example"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem('Tabs', tabName='tabs',\
               menuSubItem('Tab 1', tabName='tab1'),\
               menuSubItem('Tab 2', tabName='tab2')\
      )\
    )\
  ),\
  \
  dashboardBody(\
    \
    tabItems(\
      tabItem(tabName='tab1',\
              actionButton("import","Import"),\
              br(),\
              tags$div(tags$h3(tags$b("Get Selected Row Values",style="color: rgb(57,156,8)"))),\
              br(),\
              DT::dataTableOutput('ProductDataTable')\
      ),\
      tabItem(tabName='tab2',\
              actionButton("display","Display"),\
              uiOutput('info')\
      )\
    )\
  )\
)\
\
server <- function(input, output) \{\
  \
  observeEvent(input$import,\{\
    \
    Product <- mtcars\
    \
    output$ProductDataTable <- DT::renderDataTable(\{\
      \
      DT::datatable(Product,selection = "single",\
                    # JS using call back function to get the row values on single click\
                    callback = JS("table.on('click.dt', 'tr',\
                                  function() \{\
                                  Shiny.onInputChange('rows', table.rows(this).data().toArray());\
                                  \});"),\
\
                    extensions = c('Buttons', 'ColReorder', 'FixedHeader', 'Scroller'),\
                    rownames=FALSE,\
                    options=list(dom = 'Bfrtip',\
                                 searching = T,\
                                 pageLength = 25,\
                                 searchHighlight = TRUE,\
                                 colReorder = TRUE,\
                                 fixedHeader = TRUE,\
                                 filter = 'bottom',\
                                 buttons = c('copy', 'csv','excel', 'print'),\
                                 paging    = TRUE,\
                                 deferRender = TRUE,\
                                 scroller = TRUE,\
                                 scrollX = TRUE,\
                                 scrollY = 700\
                                 \
                    ))\
    \})\
    \
\})\
  \
  observeEvent(input$display,\{\
    \
    row_count <- input$ProductDataTable_rows_selected\
    \
    output$info <- renderPrint(\{\
      cat('Row Selected 1st Col Value: ')\
      # getting 1st row col value\
      cat(input$rows[1], sep = ', ')\
      \
    \})\
    \
  \})\
  \}\
\
shinyApp(ui, server)\
\
7: new datable\
\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
mtcars2 = mtcars[, c(1:5, 9)]\
mtcars2$am = factor(mtcars$am, c(0, 1), c('automatic', 'manual'))\
\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    \
    \
    fluidRow(\
      column(4,\
             selectInput("postCode",\
                         "postcode:",\
                         c("All",\
                           unique(as.character(centers$postCode))))\
      ),\
      column(4,\
             selectInput("Religion",\
                         "Religion:",\
                         c("All",\
                           unique(as.character(centers$RELIGION))))\
      ),\
      column(4,\
             selectInput("Culture",\
                         "Culture:",\
                         c("All",\
                           unique(as.character(centers$CULTURE))))\
      )\
    ),\
    DT::dataTableOutput("table"),\
   \
  \
    div(\
      textInput(inputId = "my_address", label = "")    \
      ,textOutput(outputId = "copy_of_address")\
      ,HTML(paste0("\
                   <script>\
                   function initAutocomplete() \{\
                   new google.maps.places.Autocomplete(\
                   (document.getElementById('my_address')),\
                   \{types: ['geocode']\}\
                   );\
                   \}\
                   </script>\
                   <script src='https://maps.googleapis.com/maps/api/js?key=", key,"&libraries=places&callback=initAutocomplete'\
                   async defer></script>\
                   "))\
      ,google_mapOutput(outputId = "my_map")\
      ),\
    \
    \
    tabItems(\
      # First tab content\
      tabItem(tabName = "dashboard",\
              fluidRow(\
                box(plotOutput("plot1", height = 250)),\
                \
                box(\
                  title = "Controls",\
                  sliderInput("slider", "Number of observations:", 1, 100, 50)\
                )\
              )\
      ),\
      \
      # Second tab content\
      tabItem(tabName = "widgets",\
              h2("Widgets tab content")\
      )\
    )\
      )\
      )\
\
\
\
\
\
\
\
server <- function(input, output) \{\
  set.seed(122)\
  histdata <- rnorm(500)\
  \
  output$plot1 <- renderPlot(\{\
    data <- histdata[seq_len(input$slider)]\
    hist(data)\
  \})\
  \
  my_address <- reactive(\{\
    input$my_address\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
  output$table <- DT::renderDataTable(DT::datatable(\{\
    data <- centers\
    if (input$postCode != "All") \{\
      data <- data[data$postCode == input$postCode,]\
    \}\
    \
    data\
  \}))\
  \
  output$my_map <- renderGoogle_map(\{\
    my_address <- my_address()\
    validate(\
      need(my_address, "Address not available")\
    )\
    \
    df <- google_geocode(address = my_address)\
    my_coords <- geocode_coordinates(df)\
    my_coords <- c(my_coords$lat[1], my_coords$lng[1])\
    \
    google_map(\
      location = my_coords,\
      zoom = 12,\
      map_type_control = FALSE,\
      zoom_control = FALSE,\
      street_view_control = FALSE\
      \
     \
    )\
  \})\
\}\
\
shinyApp(ui, server)\
\
8: worked, 2 problems\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
mtcars2 = mtcars[, c(1:5, 9)]\
mtcars2$am = factor(mtcars$am, c(0, 1), c('automatic', 'manual'))\
\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    \
    \
    fluidRow(\
      column(4,\
             selectInput("postCode",\
                         "postcode:",\
                         c("All",\
                           unique(as.character(centers$postCode))))\
      ),\
      column(4,\
             selectInput("Religion",\
                         "Religion:",\
                         c("All",\
                           unique(as.character(centers$RELIGION))))\
      ),\
      column(4,\
             selectInput("Culture",\
                         "Culture:",\
                         c("All",\
                           unique(as.character(centers$CULTURE))))\
      )\
      ,\
      column(4,\
             selectInput("Address",\
                         "Address:",\
                         c("All",\
                           unique(as.character(centers$Address))))\
      )\
    ),\
    DT::dataTableOutput("table"),\
    column(3, verbatimTextOutput('x4')),\
    \
\
\
   \
    textOutput("celltext"),\
    \
    \
   \
  \
    div(\
      textInput(inputId = "my_address", label = "")    \
      ,textOutput(outputId = "copy_of_address")\
      ,HTML(paste0("\
                   <script>\
                   function initAutocomplete() \{\
                   new google.maps.places.Autocomplete(\
                   (document.getElementById('my_address')),\
                   \{types: ['geocode']\}\
                   );\
                   \}\
                   </script>\
                   <script src='https://maps.googleapis.com/maps/api/js?key=", key,"&libraries=places&callback=initAutocomplete'\
                   async defer></script>\
                   "))\
      ,google_mapOutput(outputId = "my_map")\
      ),\
    \
    \
    tabItems(\
      # First tab content\
      tabItem(tabName = "dashboard",\
              fluidRow(\
                box(plotOutput("plot1", height = 250)),\
                \
                box(\
                  title = "Controls",\
                  sliderInput("slider", "Number of observations:", 1, 100, 50)\
                )\
              )\
      ),\
      \
      # Second tab content\
      tabItem(tabName = "widgets",\
              h2("Widgets tab content")\
      )\
    )\
      )\
      )\
\
\
\
\
\
\
\
server <- function(input, output) \{\
  set.seed(122)\
  histdata <- rnorm(500)\
  \
  output$plot1 <- renderPlot(\{\
    data <- histdata[seq_len(input$slider)]\
    hist(data)\
  \})\
  \
  my_address <- reactive(\{\
    #input$my_address\
    #centers[['Address']][1]\
    #input$Address\
    #output$celltext\
    centers[input$table_cells_selected]\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
#  output$table <- DT::renderDataTable(DT::datatable(\{\
 #   data <- centers\
  #  if (input$postCode != "All") \{\
   #   data <- data[data$postCode == input$postCode,]\
  #  \}\
    \
   # data\
#  \}))\
  \
  #\
  output$table <- DT::renderDataTable(centers, \
                                            selection=list(mode="single",target="cell"),\
                                            server = FALSE,\
                                            rownames=FALSE\
  )\
  \
  #output$selectedCells <- renderPrint(input$table_cells_selected)\
  output$celltext <- renderText(\{\
    #cell <- input$table_cells_selected\
    centers <- centers[input$table_cells_selected]\
  \})\
  \
  #\
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  output$selected <- renderText(\{ \
    selectedRow()\
  \})\
  \
  output$address <- renderText(\{ \
    table['Address']\
  \})\
  output$x4 = renderPrint(\{\
    s = input$table_rows_selected\
    if (length(s)) \{\
      cat('These rows were selected:\\n\\n')\
      cat(s['Address'])\
      cat(s, sep = ', ')\
      \
    \}\
  \})\
  \
  output$my_map <- renderGoogle_map(\{\
    my_address <- my_address()\
    validate(\
      need(my_address, "Address not available")\
    )\
    \
    df <- google_geocode(address = my_address)\
    my_coords <- geocode_coordinates(df)\
    my_coords <- c(my_coords$lat[1], my_coords$lng[1])\
    \
    google_map(\
      location = my_coords,\
      zoom = 12,\
      map_type_control = FALSE,\
      zoom_control = FALSE,\
      street_view_control = FALSE\
      \
     \
    ) \
  \})\
\}\
\
shinyApp(ui, server)\
\
10: leaflet\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    leafletOutput("sitemap"),\
    \
    \
    fluidRow(\
      column(4,\
             selectInput("postCode",\
                         "postcode:",\
                         c("All",\
                           unique(as.character(centers$postCode))))\
      ),\
      column(4,\
             selectInput(\'93State\'94,\
                         \'93State:\'94,\
                         c("All",\
                           unique(as.character(centers$S))))\
      ),\
      column(4,\
             selectInput("Culture",\
                         "Culture:",\
                         c("All",\
                           unique(as.character(centers$CULTURE))))\
      )\
      ,\
      column(4,\
             selectInput("Address",\
                         "Address:",\
                         c("All",\
                           unique(as.character(centers$Address))))\
      )\
    ),\
    DT::dataTableOutput("table"),\
    column(3, verbatimTextOutput('x4')),\
    \
   \
    textOutput("celltext"),\
    \
\
    \
    \
  \
      \
   \
\
    # Second tab content\
    tabItem(tabName = "widgets",\
            h2("Widgets tab content")\
    )\
  )\
)\
\
\
\
\
\
\
\
server <- function(input, output) \{\
  \
  map = leaflet(data=centers) %>% \
    addTiles() %>% setView(144.9631,-37.8136,zoom = 5)%>%\
    addMarkers(~longitude,~latitude,popup=~as.character(OUTLET_NAME))\
  output$sitemap = renderLeaflet(map)\
  \
\
  \
  my_address <- reactive(\{\
    #input$my_address\
    #centers[['Address']][1]\
    #input$Address\
    #output$celltext\
    centers[input$table_cells_selected]\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
#  output$table <- DT::renderDataTable(DT::datatable(\{\
 #   data <- centers\
  #  if (input$postCode != "All") \{\
   #   data <- data[data$postCode == input$postCode,]\
  #  \}\
    \
   # data\
#  \}))\
  \
  #\
  output$table <- DT::renderDataTable(centers, \
                                            selection=list(mode="single",target="cell"),\
                                            server = FALSE,\
                                            rownames=FALSE\
  )\
  \
  #output$selectedCells <- renderPrint(input$table_cells_selected)\
  output$celltext <- renderText(\{\
    #cell <- input$table_cells_selected\
    centers <- centers[input$table_cells_selected]\
  \})\
  \
  #\
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  output$selected <- renderText(\{ \
    selectedRow()\
  \})\
  \
  output$address <- renderText(\{ \
    table['Address']\
  \})\
  output$x4 = renderPrint(\{\
    s = input$table_rows_selected\
    if (length(s)) \{\
      cat('These rows were selected:\\n\\n')\
      cat(s['Address'])\
      cat(s, sep = ', ')\
      \
    \}\
  \})\
  \
  \
\
\}\
\
shinyApp(ui, server)\
\
11: leaflet (select - marker)\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
\
\
ui <- dashboardPage(\
  dashboardHeader(title = "Basic dashboard"),\
  dashboardSidebar(\
    sidebarMenu(\
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),\
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))\
    )\
  ),\
  dashboardBody(\
    leafletOutput("sitemap"),\
    \
    \
    fluidRow(\
      column(4,\
             selectInput("postCode",\
                         "postcode:",\
                         c("All",\
                           unique(as.character(centers$postCode))))\
      ),\
      column(4,\
             selectInput("Religion",\
                         "Religion:",\
                         c("All",\
                           unique(as.character(centers$RELIGION))))\
      ),\
      column(4,\
             selectInput("Culture",\
                         "Culture:",\
                         c("All",\
                           unique(as.character(centers$CULTURE))))\
      )\
      ,\
      column(4,\
             selectInput("Address",\
                         "Address:",\
                         c("All",\
                           unique(as.character(centers$Address))))\
      )\
    ),\
    DT::dataTableOutput("table"),\
   \
    \
   \
    textOutput("celltext")\
    \
\
    \
    \
  \
      \
   \
\
  )\
)\
\
\
\
\
\
\
\
server <- function(input, output) \{\
  \
 \
  \
\
  \
  my_address <- reactive(\{\
    #input$my_address\
    #centers[['Address']][1]\
    #input$Address\
    #output$celltext\
    centers[input$table_rows_selected]\
  \})\
  \
  output$copy_of_address <- renderText(\{\
    my_address()\
  \})\
  \
#  output$table <- DT::renderDataTable(DT::datatable(\{\
 #   data <- centers\
  #  if (input$postCode != "All") \{\
   #   data <- data[data$postCode == input$postCode,]\
  #  \}\
    \
   # data\
#  \}))\
  \
  #\
  output$table <- DT::renderDataTable(centers, \
                                            selection='single',\
                                            server = FALSE,\
                                            rownames=FALSE\
                                     \
  )\
  \
  #centersfiltered <- reactive (\{centers %>% filter(No == input$table_rows_selected)\})\
 \
  observeEvent(input$table_rows_selected,\{\
    \
    centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
    \
    map = leaflet(data=centersfiltered) %>% \
      addTiles() %>% setView(151.2093,-33.8688,zoom = 3)%>%  \
      addMarkers(~longitude,~latitude,popup=~as.character(OUTLET_NAME))\
    output$sitemap = renderLeaflet(map)\
    \
  \})\
  \
  \
\
  \
  #output$selectedCells <- renderPrint(input$table_cells_selected)\
  output$celltext <- renderText(\{\
    #cell <- input$table_cells_selected\
    centers <- centers[input$table_rows_selected]\
  \})\
  \
  #\
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  output$selected <- renderText(\{ \
    selectedRow()\
  \})\
  \
  output$address <- renderText(\{ \
    table['Address']\
  \})\
  output$x4 = renderPrint(\{\
    s = input$table_rows_selected\
    if (length(s)) \{\
      cat('These rows were selected:\\n\\n')\
      cat(s['Address'])\
      cat(s, sep = ', ')\
      \
    \}\
  \})\
  \
  \
\
\}\
\
shinyApp(ui, server)\
\
\
\
\
\
\
12:  good \
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
\
\
ui <- navbarPage(\
  \
  title = 'Home care centers', id = 'x0',\
  \
  tabPanel('Search',\
    \
    \
           leafletOutput("sitemap"),\
           \
    DT::dataTableOutput("table")\
   \
    \
   \
   \
    \
\
    \
    \
  \
      \
   \
\
  ),\
  tabPanel('Show all', \
           \
           leafletOutput("allMap")\
           \
           \
)\
)\
\
\
\
\
\
\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
        \
            rownames=FALSE,\
            options = list(searchHighlight = TRUE)\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
\
 #\
  observeEvent(input$table_rows_selected,\{\
    centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
    \
    map = leaflet(data=centersfiltered ) %>% \
      addTiles() %>% setView(151.2093,-33.8688,zoom = 3)%>%  \
      addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
    output$sitemap = renderLeaflet(map)\
    \
  \})\
  #\
  \
  \
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
  #\
  observeEvent(input$allMap_marker_click, \{ \
    p <- input$allMap_marker_click  # typo was on this line\
    print(p)\
  \})\
  #\
  \
  \
  \
  \
\
\}\
\
shinyApp(ui, server)\
\
13: leaflet perfect\
\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
ui <- navbarPage(\
  \
  title = 'Home care centers', id = 'x0',\
  \
  tabPanel('Search',\
    \
    \
           leafletOutput("sitemap"),\
           \
    DT::dataTableOutput("table")\
  ),\
  tabPanel('Show all', \
           \
           leafletOutput("allMap")\
           \
           \
)\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
        \
            rownames=FALSE,\
            options = list(searchHighlight = TRUE)\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 12)%>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
\
16: very very good\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
ui <- fluidPage(\
  \
  \
  \
\
          \
          h1( em("Home Care Centers in Australia"), align = "center"),\
           leafletOutput("sitemap"),\
           titlePanel(""),\
           \
           h5("Search by postcode, culture, language, religion, and services. Just type in the search  box",align = "right",style = "color:blue"),\
           titlePanel(""),\
           \
    DT::dataTableOutput("table")\
  \
\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
            extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
            \
        \
            rownames=FALSE,\
            #options = list(searchHighlight = TRUE)\
            options = list(searchHighlight = TRUE,dom = 'Bfrtip',\
                           buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = TRUE,\
                           scrollY = 200,\
                           scroller = TRUE,\
              initComplete = JS(\
                "function(settings, json) \{",\
                "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                "\}")\
            )\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
\
\
\
14: Ok\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
ui <- fluidPage(\
  \
  \
  \
\
          \
          h1( em("Home Care Centers in Australia"), align = "center"),\
          #h5("Click the home care center name to see the location on the map",align = "left",style = "color:blue"),\
           leafletOutput("sitemap"),\
           titlePanel(""),\
          \
           h5("Search by postcode, culture, language, religion, and services. Just type in the search  box",align = "right",style = "color:blue"),\
           titlePanel(""),\
          \
    DT::dataTableOutput("table")\
  \
\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
            extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
            \
        \
            rownames=FALSE,\
            #options = list(searchHighlight = TRUE)\
            options = list(searchHighlight = TRUE,dom = 'Bfrtip',\
                           buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = TRUE,\
                           scrollY = 200,\
                           scroller = TRUE,\
              initComplete = JS(\
                "function(settings, json) \{",\
                "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                "\}")\
            )\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
17: New layout\
\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
         #sidebar \{\
            background-color: white;\
        \}\
\
        body, label, input, button, select \{ \
          font-family: "Arial";\
        \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
 \
  \
  sidebarLayout(\
   \
    \
    sidebarPanel(id="sidebar",\
      \
      img(id="img",src = "LogoBlue.png", height = 200, width=400),\
      \
      #h3( em("Home Care Centers in Australia"), align = "center")\
      h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
      h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:blue",font="Times New Roman"),\
      \
      h4("2: Search by postcode, culture, language, religion, and services. Just type in the search  box.",align = "left",style = "color:blue",font="Times New Roman"),\
      \
      h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:blue",font="Times New Roman")),\
      \
     \
      \
     \
      \
  \
\
    mainPanel(\
      \
      leafletOutput("sitemap"),\
      DT::dataTableOutput("table")\
     \
      \
      \
    )  \
          #h1( em("Home Care Centers in Australia"), align = "center"),\
          #h5("Click the home care center name to see the location on the map",align = "left",style = "color:blue"),\
           \
          \
          \
           #h5("Search by postcode, culture, language, religion, and services. Just type in the search  box",align = "right",style = "color:blue"),\
           \
          \
  \
\
)\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
            extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
            \
        \
            rownames=FALSE,\
           \
            #options = list(searchHighlight = TRUE)\
            options = list(searchHighlight = TRUE,dom = 'Bfrtip',pageLength=5,\
                           buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = TRUE,\
                          # scrollY = 200\
                           #scroller = TRUE,\
              initComplete = JS(\
                "function(settings, json) \{",\
                "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                "\}")\
            )\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
\
\
\
18: best\
\
\
## app.R ##\
library(shiny)\
library(shinydashboard)\
library(googleway)\
library(DT)\
library(leaflet)\
library(datasets)\
library(dplyr)\
library(magrittr)\
\
key <- "AIzaSyAOUAfjByh7eSEVrv2ygMRrZo6MHLUB5og"\
set_key(key = key)\
google_keys()\
\
centers <- read.csv('test2_copy.csv')\
\
ui <- fluidPage(tags$head(tags$style(\
  HTML('\
         #sidebar \{\
            background-color: white;\
        \}\
\
        body, label, input, button, select \{ \
          font-family: "Arial";\
        \}'))),\
  tags$head(tags$style(\
    type="text/css",\
    "#img img \{max-width: 100%; width: 100%; height: auto\}"\
  )),\
 \
  \
  sidebarLayout(\
   \
    \
    sidebarPanel(id="sidebar",\
      \
      img(id="img",src = "LogoBlue.png", height = 200, width=400),\
      \
      #h3( em("Home Care Centers in Australia"), align = "center")\
      h3( em("Tips:") , align = "left",style = "color:Black",font="Times New Roman"),\
      h4("1: Click + to see the detailed information and the location on the map.",align = "left",style = "color:navy",font="Times New Roman"),\
      \
      \
      h4("2: Search by postcode, culture, language, religion, and services. Just type in the search box. Examples: ",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Italian",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Italian 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Dementia",align = "left",style = "color:navy",font="Times New Roman"),\
      h5("- Dementia Spanish 2200",align = "left",style = "color:navy",font="Times New Roman"),\
      \
      h4("3: Export your search results by choosing Copy, CSV, Excel, PDF, Print.",align = "left",style = "color:navy",font="Times New Roman")),\
      \
     \
      \
     \
      \
  \
\
    mainPanel(\
      \
      leafletOutput("sitemap"),\
      DT::dataTableOutput("table")\
     \
      \
      \
    )  \
          #h1( em("Home Care Centers in Australia"), align = "center"),\
          #h5("Click the home care center name to see the location on the map",align = "left",style = "color:blue"),\
           \
          \
          \
           #h5("Search by postcode, culture, language, religion, and services. Just type in the search  box",align = "right",style = "color:blue"),\
           \
          \
  \
\
)\
)\
\
server <- function(input, output) \{\
  \
#\
  datatable = datatable(centers, \
            selection='single',\
            extensions = c('Responsive','Buttons','FixedHeader','Scroller'),\
            \
        \
            rownames=FALSE,\
           \
            #options = list(searchHighlight = TRUE)\
            options = list(searchHighlight = TRUE,dom = 'Bfrtip',pageLength=5,\
                           buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),fixedHeader = TRUE,deferRender = TRUE,\
                           scrollY = 200,\
                           scroller = TRUE,\
              initComplete = JS(\
                "function(settings, json) \{",\
                "$(this.api().table().header()).css(\{'background-color': '#000', 'color': '#fff'\});",\
                "\}")\
            )\
           ) %>%formatStyle('No', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Name', backgroundColor = 'white', fontWeight = 'bold')%>%\
    formatStyle('Address', backgroundColor = 'lightblue', fontWeight = 'bold') %>%\
    formatStyle('Culture', backgroundColor = 'white', fontWeight = 'bold')%>%\
    \
    formatStyle('Religion', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Language', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Services', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('State', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Postcode', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Latitude', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Longitude', backgroundColor = 'lightblue', fontWeight = 'bold')%>%\
    formatStyle('Phone', backgroundColor = 'white', fontWeight = 'bold') %>%\
    formatStyle('Website', backgroundColor = 'lightblue', fontWeight = 'bold')\
  \
  output$table <- renderDataTable(datatable) \
  #%>%formatStyle(colnames(centers)[1:ncol(centers)], backgroundColor = 'lightyellow', fontWeight = 'bold')\
  \
 #\
  observeEvent(input$table_rows_selected,\{\
      if(!is.null(input$table_rows_selected))\
      \{\
      centersfiltered <- centers %>% filter(No == input$table_rows_selected)\
      \
      map = leaflet(data=centersfiltered ) %>% \
        addTiles() %>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      output$sitemap = renderLeaflet(map)\
      \}\
    else\
    \{\
      mapAll = leaflet(data=centers ) %>% \
        addTiles() %>% setView(151.2093,-33.8688,zoom = 10)%>%  \
        addMarkers(~Longitude,~Latitude,popup=~as.character(Name))%>%\
        addEasyButton(easyButton(\
          icon="fa-crosshairs", title="Locate Me",\
          onClick=JS("function(btn, map)\{ map.locate(\{setView: true\}); \}")))\
      output$sitemap = renderLeaflet(mapAll)\
      \
    \}\
      \
  \},ignoreNULL = FALSE)\
  #\
  \
  #\
  \
  mapAll = leaflet(data=centers ) %>% \
    addTiles() %>% setView(151.2093,-33.8688,zoom = 8)%>%  \
    addMarkers(~Longitude,~Latitude,popup=~as.character(Name))\
  output$allMap = renderLeaflet(mapAll)\
  \
  \
  selectedRow <- eventReactive(input$table_rows_selected,\{\
    row.names(centers)[c(input$table_rows_selected)]\
  \})\
  \
 \
\
\}\
\
shinyApp(ui, server)\
\
\
\
\
\
\
}